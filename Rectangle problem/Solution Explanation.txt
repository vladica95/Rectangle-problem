Hello,
I solved this rectangle problem in C# in Microsoft Visual Studio 2017.
I created class RectangleBars and class Program in namespace Rectangle_problem.
In class Program is main program and there is created RB and represents class RectangleBars. In main program is called functions Console.WriteLine to print result of BiggestRectangle function.BiggestRectangle function calculates biggest rectangle in given histogram.
In class RectangleBars there is one attribute that is array of heights of rectangles in histogram.
There is default constructor where you need to enter first how many bars are in histogram then is created empty array where are heights added one by one.You need to enter one height then you press enter and repeat untill number of bars is reached. Console.ReadLine() returns string so i had to parse that string to get number, then that number is added in arrayOfHeights. Under constructor is property who allows easier getting and setting values from array and in arrayOfHeights.
Under property is function Partition which returns index of partition element in array, arguments of that function are someArray , lowBoundary and highBoundary. First I put partElement to have the value of the last element in a arrayOfHeights and partIndex to have value of lowBoundary reduced by 1. Then I use for loop to check if elements from array are smaller or equal than partElement if yes then I increase partIndex by one and swap values of elements in array with index partIndex and with index j(j is simple counder from for loop) after for loopt I switch values of elements with index partIndex increased by 1 and with index highBoundary and then return value of partIndex increased by 1. I need that function to help me in sorting array. Under that is function SortArray where I sort arrayOfHeights by heights from min to max height.I first check if lowBoundary smaller than highBoundary , if yes then calculate partition index with function Partition , then recursively call function SortArray but with different boundaries. I need that function to help me in simplifying arrayOfHeights.Under function SortArray is function SimplifiedArray which returns array and doesn't have argument. In function SimplifiedArray first I created new array simplifiedArray then I copied elements from arrayOfHeights to simplifiedArray with function Array.Copy . In function Array.Copy first argument is source array , second destination array and third is number of how many elements to copy from source array.Then I sorted arrayOfHeights with function SortArray then I created new array where will be heights without repeating , then I checked and filled that newArray with heights without repeating , but there are some 0 in newArray that I don't need, that is result of repeating values of heights, I had to create newNewArray which has lenght of tempCounter(tempCounter is simple counter that represents how many non repeating heights are in arrayOfHeights) then I copied elements from newArray to newNewArray but only ones I need that is first tempCounter elements and then return that new simplified array. And under function SimplifiedArray is BiggestRectangle which returns number and that number represents area of biggest rectangle in this histogram and this function is without arguments . I first created new array simpleArray where I will put new simplified and sorted array that function SimplifiedArray will return, then I created local variable BiggestOne which represents number of area of biggest rectangle and it is initialized with 0. Under that is for loop which will help me to compare value of height from simpleArray with all values of heights from ArrayOfHeights. First I created 4 local variables , compareHeight there I put value of heights from simplifiedArray . lineCounter is initialized with 0 and represents number of how many heights from ArrayOfHeights are smaller than compareHeight uninterrupted. biggestLine initialized with 0 and represents number of biggest lineCounter for some compareHeight. j is simple counter used for while loop and it is initialized with 0. I used while loop to go through arrayOfHeights and then I compared compareHeight and heights of arrayOfHeights and If is height of arrayOfHeights smaller than compareHeight then I increase lineCounter by one if compareHeight is smaller then I compare biggestLine with lineCounter and if lineCounter is bigger I give value of lineCounter to biggestLine and reset lineCounter to 0.After that if and else branches I need to increase j by one because while loop.When while loop is finished I must check if lineCounter is bigger than biggestLine because maybe there are cases where compareHeight is smaller than every height in arrayOfHeights and if is that is case I put new value of biggestLine and that is value of lineCounter. After that I calculate area of rectangle with simple multiplication of compareHeight and biggestLine, then I must check if that new area is bigger than biggestOne and if that is case I give new value to biggestOne and that is value of area.Then repeat process untill I check same for all other values of heights in simpleArray. When that is done I just return value of biggestOne and that is area of biggestRectangle in histogram.

